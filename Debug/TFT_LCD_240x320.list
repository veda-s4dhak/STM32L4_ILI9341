
TFT_LCD_240x320.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002440  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002614  08002614  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002614  08002614  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002614  08002614  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002618  08002618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800261c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000010  0800262c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800262c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e9a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001454  00000000  00000000  00027eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  00029330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  00029ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020c03  00000000  00000000  0002a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065fa  00000000  00000000  0004adeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7619  00000000  00000000  000513e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001189fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dec  00000000  00000000  00118a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080025bc 	.word	0x080025bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080025bc 	.word	0x080025bc

080001d4 <LCD_Init>:
#define ABS(X)  ((X) > 0 ? (X) : -(X))

static __IO u32 TextColor = 0x000000, BackColor = 0xFFFFFF;

void LCD_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	LCD_ILI9341_Reset();
 80001d8:	f000 f804 	bl	80001e4 <LCD_ILI9341_Reset>
	LCD_ILI9341_Init();
 80001dc:	f000 f824 	bl	8000228 <LCD_ILI9341_Init>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <LCD_ILI9341_Reset>:

void LCD_ILI9341_Reset(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f2:	f001 f833 	bl	800125c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f000 fdae 	bl	8000d58 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000206:	f001 f829 	bl	800125c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800020a:	200a      	movs	r0, #10
 800020c:	f000 fda4 	bl	8000d58 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021a:	f001 f81f 	bl	800125c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800021e:	2032      	movs	r0, #50	; 0x32
 8000220:	f000 fd9a 	bl	8000d58 <HAL_Delay>
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}

08000228 <LCD_ILI9341_Init>:

void LCD_ILI9341_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	LCD_ILI9341_CMD(0xEF);  //
 800022c:	20ef      	movs	r0, #239	; 0xef
 800022e:	f000 f92f 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x03);
 8000232:	2003      	movs	r0, #3
 8000234:	f000 f95a 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x80);
 8000238:	2080      	movs	r0, #128	; 0x80
 800023a:	f000 f957 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x02);
 800023e:	2002      	movs	r0, #2
 8000240:	f000 f954 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xCF);
 8000244:	20cf      	movs	r0, #207	; 0xcf
 8000246:	f000 f923 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x00);
 800024a:	2000      	movs	r0, #0
 800024c:	f000 f94e 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0xAA);
 8000250:	20aa      	movs	r0, #170	; 0xaa
 8000252:	f000 f94b 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0xB0);
 8000256:	20b0      	movs	r0, #176	; 0xb0
 8000258:	f000 f948 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xED);
 800025c:	20ed      	movs	r0, #237	; 0xed
 800025e:	f000 f917 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x67);
 8000262:	2067      	movs	r0, #103	; 0x67
 8000264:	f000 f942 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x03);
 8000268:	2003      	movs	r0, #3
 800026a:	f000 f93f 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x12);
 800026e:	2012      	movs	r0, #18
 8000270:	f000 f93c 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x81);
 8000274:	2081      	movs	r0, #129	; 0x81
 8000276:	f000 f939 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xE8);  //
 800027a:	20e8      	movs	r0, #232	; 0xe8
 800027c:	f000 f908 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x85);
 8000280:	2085      	movs	r0, #133	; 0x85
 8000282:	f000 f933 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x11);
 8000286:	2011      	movs	r0, #17
 8000288:	f000 f930 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x78);
 800028c:	2078      	movs	r0, #120	; 0x78
 800028e:	f000 f92d 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xF6);  //interface control
 8000292:	20f6      	movs	r0, #246	; 0xf6
 8000294:	f000 f8fc 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x01);
 8000298:	2001      	movs	r0, #1
 800029a:	f000 f927 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x30);
 800029e:	2030      	movs	r0, #48	; 0x30
 80002a0:	f000 f924 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x00);
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 f921 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xCB);  //
 80002aa:	20cb      	movs	r0, #203	; 0xcb
 80002ac:	f000 f8f0 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x39);
 80002b0:	2039      	movs	r0, #57	; 0x39
 80002b2:	f000 f91b 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x2C);
 80002b6:	202c      	movs	r0, #44	; 0x2c
 80002b8:	f000 f918 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x00);
 80002bc:	2000      	movs	r0, #0
 80002be:	f000 f915 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x34);
 80002c2:	2034      	movs	r0, #52	; 0x34
 80002c4:	f000 f912 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x02);
 80002c8:	2002      	movs	r0, #2
 80002ca:	f000 f90f 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xF7);
 80002ce:	20f7      	movs	r0, #247	; 0xf7
 80002d0:	f000 f8de 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x20);
 80002d4:	2020      	movs	r0, #32
 80002d6:	f000 f909 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xEA);  //
 80002da:	20ea      	movs	r0, #234	; 0xea
 80002dc:	f000 f8d8 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x00);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f000 f903 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x00);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 f900 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xB6);  // display function control
 80002ec:	20b6      	movs	r0, #182	; 0xb6
 80002ee:	f000 f8cf 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x0A);
 80002f2:	200a      	movs	r0, #10
 80002f4:	f000 f8fa 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x82);
 80002f8:	2082      	movs	r0, #130	; 0x82
 80002fa:	f000 f8f7 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x27);
 80002fe:	2027      	movs	r0, #39	; 0x27
 8000300:	f000 f8f4 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xC0);  //Power control
 8000304:	20c0      	movs	r0, #192	; 0xc0
 8000306:	f000 f8c3 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x21);     //VRH[5:0] 0x05
 800030a:	2021      	movs	r0, #33	; 0x21
 800030c:	f000 f8ee 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xC1);  //Power control
 8000310:	20c1      	movs	r0, #193	; 0xc1
 8000312:	f000 f8bd 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x11);     //SAP[2:0];BT[3:0]
 8000316:	2011      	movs	r0, #17
 8000318:	f000 f8e8 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xc5);  //Vcom control 1
 800031c:	20c5      	movs	r0, #197	; 0xc5
 800031e:	f000 f8b7 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x24);  // 0x24
 8000322:	2024      	movs	r0, #36	; 0x24
 8000324:	f000 f8e2 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x3c);  // 0x3C
 8000328:	203c      	movs	r0, #60	; 0x3c
 800032a:	f000 f8df 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xc7); // Vcom control 2
 800032e:	20c7      	movs	r0, #199	; 0xc7
 8000330:	f000 f8ae 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0xc8);    //0xc8
 8000334:	20c8      	movs	r0, #200	; 0xc8
 8000336:	f000 f8d9 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0x36);  // Memory Access Control
 800033a:	2036      	movs	r0, #54	; 0x36
 800033c:	f000 f8a8 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x48);
 8000340:	2048      	movs	r0, #72	; 0x48
 8000342:	f000 f8d3 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0x3A);
 8000346:	203a      	movs	r0, #58	; 0x3a
 8000348:	f000 f8a2 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x55);
 800034c:	2055      	movs	r0, #85	; 0x55
 800034e:	f000 f8cd 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xB1); // frame rate control
 8000352:	20b1      	movs	r0, #177	; 0xb1
 8000354:	f000 f89c 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x00);
 8000358:	2000      	movs	r0, #0
 800035a:	f000 f8c7 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x13);  //
 800035e:	2013      	movs	r0, #19
 8000360:	f000 f8c4 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xB4); // display inversion control
 8000364:	20b4      	movs	r0, #180	; 0xb4
 8000366:	f000 f893 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x02);
 800036a:	2002      	movs	r0, #2
 800036c:	f000 f8be 	bl	80004ec <LCD_ILI9341_DATA>
	//LCD_ILI9341_DATA(0x00);

	LCD_ILI9341_CMD(0xF2);   // 3Gamma Function Disable
 8000370:	20f2      	movs	r0, #242	; 0xf2
 8000372:	f000 f88d 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x00);
 8000376:	2000      	movs	r0, #0
 8000378:	f000 f8b8 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0x26);  //Gamma curve selected
 800037c:	2026      	movs	r0, #38	; 0x26
 800037e:	f000 f887 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x01);
 8000382:	2001      	movs	r0, #1
 8000384:	f000 f8b2 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xE0);  //Gamma setting
 8000388:	20e0      	movs	r0, #224	; 0xe0
 800038a:	f000 f881 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x0F);
 800038e:	200f      	movs	r0, #15
 8000390:	f000 f8ac 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x1B);
 8000394:	201b      	movs	r0, #27
 8000396:	f000 f8a9 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x19);
 800039a:	2019      	movs	r0, #25
 800039c:	f000 f8a6 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x0C);
 80003a0:	200c      	movs	r0, #12
 80003a2:	f000 f8a3 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x0D);
 80003a6:	200d      	movs	r0, #13
 80003a8:	f000 f8a0 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x07);
 80003ac:	2007      	movs	r0, #7
 80003ae:	f000 f89d 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x44);
 80003b2:	2044      	movs	r0, #68	; 0x44
 80003b4:	f000 f89a 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0xA9);
 80003b8:	20a9      	movs	r0, #169	; 0xa9
 80003ba:	f000 f897 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x2F);
 80003be:	202f      	movs	r0, #47	; 0x2f
 80003c0:	f000 f894 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x08);
 80003c4:	2008      	movs	r0, #8
 80003c6:	f000 f891 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x0D);
 80003ca:	200d      	movs	r0, #13
 80003cc:	f000 f88e 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x03);
 80003d0:	2003      	movs	r0, #3
 80003d2:	f000 f88b 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x10);
 80003d6:	2010      	movs	r0, #16
 80003d8:	f000 f888 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x0B);
 80003dc:	200b      	movs	r0, #11
 80003de:	f000 f885 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x00);
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f882 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0xE1);   //Gamma setting
 80003e8:	20e1      	movs	r0, #225	; 0xe1
 80003ea:	f000 f851 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA(0x00);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 f87c 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x24);
 80003f4:	2024      	movs	r0, #36	; 0x24
 80003f6:	f000 f879 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x26);
 80003fa:	2026      	movs	r0, #38	; 0x26
 80003fc:	f000 f876 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x03);
 8000400:	2003      	movs	r0, #3
 8000402:	f000 f873 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x12);
 8000406:	2012      	movs	r0, #18
 8000408:	f000 f870 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x08);
 800040c:	2008      	movs	r0, #8
 800040e:	f000 f86d 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x3C);
 8000412:	203c      	movs	r0, #60	; 0x3c
 8000414:	f000 f86a 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x56);
 8000418:	2056      	movs	r0, #86	; 0x56
 800041a:	f000 f867 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x50);
 800041e:	2050      	movs	r0, #80	; 0x50
 8000420:	f000 f864 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x07);
 8000424:	2007      	movs	r0, #7
 8000426:	f000 f861 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x12);
 800042a:	2012      	movs	r0, #18
 800042c:	f000 f85e 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x0C);
 8000430:	200c      	movs	r0, #12
 8000432:	f000 f85b 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x2F);
 8000436:	202f      	movs	r0, #47	; 0x2f
 8000438:	f000 f858 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x34);
 800043c:	2034      	movs	r0, #52	; 0x34
 800043e:	f000 f855 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA(0x0F);
 8000442:	200f      	movs	r0, #15
 8000444:	f000 f852 	bl	80004ec <LCD_ILI9341_DATA>

	LCD_ILI9341_CMD(0x11); //Exit Sleep
 8000448:	2011      	movs	r0, #17
 800044a:	f000 f821 	bl	8000490 <LCD_ILI9341_CMD>
	HAL_Delay(120);
 800044e:	2078      	movs	r0, #120	; 0x78
 8000450:	f000 fc82 	bl	8000d58 <HAL_Delay>
	LCD_ILI9341_CMD(0x29); //Display on
 8000454:	2029      	movs	r0, #41	; 0x29
 8000456:	f000 f81b 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_CMD(0x2C); //write data to RAM
 800045a:	202c      	movs	r0, #44	; 0x2c
 800045c:	f000 f818 	bl	8000490 <LCD_ILI9341_CMD>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <LCD_SetColors>:

void LCD_SetColors(u32 _TextColor, u32 _BackColor)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
	TextColor = _TextColor;
 800046e:	4a06      	ldr	r2, [pc, #24]	; (8000488 <LCD_SetColors+0x24>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6013      	str	r3, [r2, #0]
	BackColor = _BackColor;
 8000474:	4a05      	ldr	r2, [pc, #20]	; (800048c <LCD_SetColors+0x28>)
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	6013      	str	r3, [r2, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	2000002c 	.word	0x2000002c
 800048c:	20000000 	.word	0x20000000

08000490 <LCD_ILI9341_CMD>:

void LCD_ILI9341_CMD( uint8_t cmd )
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); // Confirmed in datasheet (low = cmd)
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 feda 	bl	800125c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Chip Select
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b2:	f000 fed3 	bl	800125c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &cmd, 1, 10);
 80004b6:	1df9      	adds	r1, r7, #7
 80004b8:	230a      	movs	r3, #10
 80004ba:	2201      	movs	r2, #1
 80004bc:	480a      	ldr	r0, [pc, #40]	; (80004e8 <LCD_ILI9341_CMD+0x58>)
 80004be:	f001 fdbf 	bl	8002040 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80004c2:	bf00      	nop
 80004c4:	4808      	ldr	r0, [pc, #32]	; (80004e8 <LCD_ILI9341_CMD+0x58>)
 80004c6:	f001 ff21 	bl	800230c <HAL_SPI_GetState>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d1f9      	bne.n	80004c4 <LCD_ILI9341_CMD+0x34>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Chip Select
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 febf 	bl	800125c <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000030 	.word	0x20000030

080004ec <LCD_ILI9341_DATA>:

void LCD_ILI9341_DATA( uint8_t data )
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // Confirmed in datasheet (high = data)
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 feac 	bl	800125c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Chip Select
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f000 fea5 	bl	800125c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &data, 1, 10);
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	230a      	movs	r3, #10
 8000516:	2201      	movs	r2, #1
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <LCD_ILI9341_DATA+0x58>)
 800051a:	f001 fd91 	bl	8002040 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800051e:	bf00      	nop
 8000520:	4808      	ldr	r0, [pc, #32]	; (8000544 <LCD_ILI9341_DATA+0x58>)
 8000522:	f001 fef3 	bl	800230c <HAL_SPI_GetState>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d1f9      	bne.n	8000520 <LCD_ILI9341_DATA+0x34>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Chip Select
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f000 fe91 	bl	800125c <HAL_GPIO_WritePin>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000030 	.word	0x20000030

08000548 <LCD_OpenWindow>:

void LCD_OpenWindow(u16 x, u16 y, u16 width, u16 height)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4604      	mov	r4, r0
 8000550:	4608      	mov	r0, r1
 8000552:	4611      	mov	r1, r2
 8000554:	461a      	mov	r2, r3
 8000556:	4623      	mov	r3, r4
 8000558:	80fb      	strh	r3, [r7, #6]
 800055a:	4603      	mov	r3, r0
 800055c:	80bb      	strh	r3, [r7, #4]
 800055e:	460b      	mov	r3, r1
 8000560:	807b      	strh	r3, [r7, #2]
 8000562:	4613      	mov	r3, r2
 8000564:	803b      	strh	r3, [r7, #0]
	LCD_ILI9341_CMD(0x2A); 				/* ÉèÖÃX×ø±ê */
 8000566:	202a      	movs	r0, #42	; 0x2a
 8000568:	f7ff ff92 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA( x >> 8 );	 			/* ÏÈ¸ß8Î»£¬È»ºóµÍ8Î» */
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	b29b      	uxth	r3, r3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ffb9 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA( x & 0x00FF );	 		/* ÉèÖÃÆðÊ¼µãºÍ½áÊøµã*/
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ffb4 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA( (x+width-1) >> 8 );
 8000584:	88fa      	ldrh	r2, [r7, #6]
 8000586:	887b      	ldrh	r3, [r7, #2]
 8000588:	4413      	add	r3, r2
 800058a:	3b01      	subs	r3, #1
 800058c:	121b      	asrs	r3, r3, #8
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ffab 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA( (x+width-1) & 0x00FF );
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	887b      	ldrh	r3, [r7, #2]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4413      	add	r3, r2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffa0 	bl	80004ec <LCD_ILI9341_DATA>
//	LCD_ILI9341_CMD(0x2B); 			 	/* ÉèÖÃY×ø±ê*/
//	LCD_ILI9341_DATA( y >> 8 );
//	LCD_ILI9341_DATA( y & 0x00FF );
//	LCD_ILI9341_DATA( (y+height-1) >> 8);
//	LCD_ILI9341_DATA( (y+height-1) & 0x00FF);
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd90      	pop	{r4, r7, pc}

080005b4 <LCD_Clear>:

void LCD_Clear(u16 x, u16 y, u16 width, u16 height, u32 color)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	4603      	mov	r3, r0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	807b      	strh	r3, [r7, #2]
 80005ce:	4613      	mov	r3, r2
 80005d0:	803b      	strh	r3, [r7, #0]
	u32 i = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]

	LCD_OpenWindow(x,y,width,height);
 80005d6:	883b      	ldrh	r3, [r7, #0]
 80005d8:	887a      	ldrh	r2, [r7, #2]
 80005da:	88b9      	ldrh	r1, [r7, #4]
 80005dc:	88f8      	ldrh	r0, [r7, #6]
 80005de:	f7ff ffb3 	bl	8000548 <LCD_OpenWindow>
	LCD_ILI9341_CMD(0x2C);
 80005e2:	202c      	movs	r0, #44	; 0x2c
 80005e4:	f7ff ff54 	bl	8000490 <LCD_ILI9341_CMD>

	for( i=0; i < (width*height); i++ )
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e00d      	b.n	800060a <LCD_Clear+0x56>
	{
		LCD_ILI9341_DATA( color >> 8 );
 80005ee:	6a3b      	ldr	r3, [r7, #32]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff79 	bl	80004ec <LCD_ILI9341_DATA>
		LCD_ILI9341_DATA( color &0xFF);
 80005fa:	6a3b      	ldr	r3, [r7, #32]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff74 	bl	80004ec <LCD_ILI9341_DATA>
	for( i=0; i < (width*height); i++ )
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	883a      	ldrh	r2, [r7, #0]
 800060e:	fb02 f303 	mul.w	r3, r2, r3
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4293      	cmp	r3, r2
 8000618:	d3e9      	bcc.n	80005ee <LCD_Clear+0x3a>
	}
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bd90      	pop	{r4, r7, pc}

08000622 <LCD_DispRec>:

void LCD_DispRec(u16 x,u16 y,u16 width,u16 height)
{
 8000622:	b590      	push	{r4, r7, lr}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	4604      	mov	r4, r0
 800062a:	4608      	mov	r0, r1
 800062c:	4611      	mov	r1, r2
 800062e:	461a      	mov	r2, r3
 8000630:	4623      	mov	r3, r4
 8000632:	80fb      	strh	r3, [r7, #6]
 8000634:	4603      	mov	r3, r0
 8000636:	80bb      	strh	r3, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
 800063c:	4613      	mov	r3, r2
 800063e:	803b      	strh	r3, [r7, #0]
	u16 i;
	for(i=x;i<(x+width);i++)
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	81fb      	strh	r3, [r7, #14]
 8000644:	e013      	b.n	800066e <LCD_DispRec+0x4c>
	{
		LCD_SetPoint(i,y);
 8000646:	88ba      	ldrh	r2, [r7, #4]
 8000648:	89fb      	ldrh	r3, [r7, #14]
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f835 	bl	80006bc <LCD_SetPoint>
		LCD_SetPoint(i,y+height-1);
 8000652:	88ba      	ldrh	r2, [r7, #4]
 8000654:	883b      	ldrh	r3, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	3b01      	subs	r3, #1
 800065c:	b29a      	uxth	r2, r3
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f82a 	bl	80006bc <LCD_SetPoint>
	for(i=x;i<(x+width);i++)
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	3301      	adds	r3, #1
 800066c:	81fb      	strh	r3, [r7, #14]
 800066e:	89fa      	ldrh	r2, [r7, #14]
 8000670:	88f9      	ldrh	r1, [r7, #6]
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	440b      	add	r3, r1
 8000676:	429a      	cmp	r2, r3
 8000678:	dbe5      	blt.n	8000646 <LCD_DispRec+0x24>
	}

	for(i=y;i<(y+height);i++)
 800067a:	88bb      	ldrh	r3, [r7, #4]
 800067c:	81fb      	strh	r3, [r7, #14]
 800067e:	e013      	b.n	80006a8 <LCD_DispRec+0x86>
	{
		LCD_SetPoint(x,i);
 8000680:	89fa      	ldrh	r2, [r7, #14]
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f818 	bl	80006bc <LCD_SetPoint>
		LCD_SetPoint(x+width-1,i);
 800068c:	88fa      	ldrh	r2, [r7, #6]
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	4413      	add	r3, r2
 8000692:	b29b      	uxth	r3, r3
 8000694:	3b01      	subs	r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	89fa      	ldrh	r2, [r7, #14]
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f80d 	bl	80006bc <LCD_SetPoint>
	for(i=y;i<(y+height);i++)
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	3301      	adds	r3, #1
 80006a6:	81fb      	strh	r3, [r7, #14]
 80006a8:	89fa      	ldrh	r2, [r7, #14]
 80006aa:	88b9      	ldrh	r1, [r7, #4]
 80006ac:	883b      	ldrh	r3, [r7, #0]
 80006ae:	440b      	add	r3, r1
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbe5      	blt.n	8000680 <LCD_DispRec+0x5e>
	}
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd90      	pop	{r4, r7, pc}

080006bc <LCD_SetPoint>:

void LCD_SetPoint(u16 x , u16 y)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	80fb      	strh	r3, [r7, #6]
 80006c8:	4613      	mov	r3, r2
 80006ca:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 80006cc:	88ba      	ldrh	r2, [r7, #4]
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f816 	bl	8000704 <LCD_SetCursor>
	LCD_ILI9341_CMD(0x2C);
 80006d8:	202c      	movs	r0, #44	; 0x2c
 80006da:	f7ff fed9 	bl	8000490 <LCD_ILI9341_CMD>
	LCD_ILI9341_DATA( TextColor >> 8 );
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <LCD_SetPoint+0x44>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff00 	bl	80004ec <LCD_ILI9341_DATA>
	LCD_ILI9341_DATA( TextColor &0xFF);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LCD_SetPoint+0x44>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fefa 	bl	80004ec <LCD_ILI9341_DATA>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000002c 	.word	0x2000002c

08000704 <LCD_SetCursor>:

void LCD_SetCursor(u16 x, u16 y)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	80fb      	strh	r3, [r7, #6]
 8000710:	4613      	mov	r3, r2
 8000712:	80bb      	strh	r3, [r7, #4]
	LCD_OpenWindow(x,y,1,1);
 8000714:	88b9      	ldrh	r1, [r7, #4]
 8000716:	88f8      	ldrh	r0, [r7, #6]
 8000718:	2301      	movs	r3, #1
 800071a:	2201      	movs	r2, #1
 800071c:	f7ff ff14 	bl	8000548 <LCD_OpenWindow>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 faa2 	bl	8000c76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f87c 	bl	800082e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f000 f909 	bl	800094c <MX_GPIO_Init>
  MX_SPI2_Init();
 800073a:	f000 f8c9 	bl	80008d0 <MX_SPI2_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Chip Select
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f000 fd88 	bl	800125c <HAL_GPIO_WritePin>

  LCD_Init();
 800074c:	f7ff fd42 	bl	80001d4 <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	LCD_Clear(  0,0,80,320,LCD_COLOR_RED);
 8000750:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800075a:	2250      	movs	r2, #80	; 0x50
 800075c:	2100      	movs	r1, #0
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff28 	bl	80005b4 <LCD_Clear>
	LCD_Clear( 80,0,80,320,LCD_COLOR_GREEN);
 8000764:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800076e:	2250      	movs	r2, #80	; 0x50
 8000770:	2100      	movs	r1, #0
 8000772:	2050      	movs	r0, #80	; 0x50
 8000774:	f7ff ff1e 	bl	80005b4 <LCD_Clear>
	LCD_Clear(160,0,80,320,LCD_COLOR_BLUE);
 8000778:	231f      	movs	r3, #31
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000780:	2250      	movs	r2, #80	; 0x50
 8000782:	2100      	movs	r1, #0
 8000784:	20a0      	movs	r0, #160	; 0xa0
 8000786:	f7ff ff15 	bl	80005b4 <LCD_Clear>
	HAL_Delay(30);
 800078a:	201e      	movs	r0, #30
 800078c:	f000 fae4 	bl	8000d58 <HAL_Delay>

	LCD_SetColors(LCD_COLOR_WHITE,LCD_COLOR_BLACK);
 8000790:	2100      	movs	r1, #0
 8000792:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000796:	f7ff fe65 	bl	8000464 <LCD_SetColors>
	LCD_Clear(0,0,240,320,LCD_COLOR_BLACK);		//BLACK
 800079a:	2300      	movs	r3, #0
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007a2:	22f0      	movs	r2, #240	; 0xf0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff ff04 	bl	80005b4 <LCD_Clear>
	HAL_Delay(30);
 80007ac:	201e      	movs	r0, #30
 80007ae:	f000 fad3 	bl	8000d58 <HAL_Delay>

	LCD_DispRec(0,0,240,320);
 80007b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007b6:	22f0      	movs	r2, #240	; 0xf0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ff31 	bl	8000622 <LCD_DispRec>
	HAL_Delay(30);
 80007c0:	201e      	movs	r0, #30
 80007c2:	f000 fac9 	bl	8000d58 <HAL_Delay>

	LCD_Clear(0,0,240,320,LCD_COLOR_WHITE);		//WHITE
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007d0:	22f0      	movs	r2, #240	; 0xf0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff feed 	bl	80005b4 <LCD_Clear>
	HAL_Delay(30);
 80007da:	201e      	movs	r0, #30
 80007dc:	f000 fabc 	bl	8000d58 <HAL_Delay>

	LCD_Clear(0,0,240,320,LCD_COLOR_RED);			//RED
 80007e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007ea:	22f0      	movs	r2, #240	; 0xf0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fee0 	bl	80005b4 <LCD_Clear>
	HAL_Delay(30);
 80007f4:	201e      	movs	r0, #30
 80007f6:	f000 faaf 	bl	8000d58 <HAL_Delay>

	LCD_Clear(0,0,240,320,LCD_COLOR_GREEN);		//GREEN
 80007fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000804:	22f0      	movs	r2, #240	; 0xf0
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff fed3 	bl	80005b4 <LCD_Clear>
	HAL_Delay(30);
 800080e:	201e      	movs	r0, #30
 8000810:	f000 faa2 	bl	8000d58 <HAL_Delay>

	LCD_Clear(0,0,240,320,LCD_COLOR_BLUE);		//BLUE
 8000814:	231f      	movs	r3, #31
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800081c:	22f0      	movs	r2, #240	; 0xf0
 800081e:	2100      	movs	r1, #0
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fec7 	bl	80005b4 <LCD_Clear>
	HAL_Delay(30);
 8000826:	201e      	movs	r0, #30
 8000828:	f000 fa96 	bl	8000d58 <HAL_Delay>
	LCD_Clear(  0,0,80,320,LCD_COLOR_RED);
 800082c:	e790      	b.n	8000750 <main+0x28>

0800082e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b096      	sub	sp, #88	; 0x58
 8000832:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2244      	movs	r2, #68	; 0x44
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f001 feb5 	bl	80025ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000858:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000862:	2302      	movs	r3, #2
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800086a:	230a      	movs	r3, #10
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800086e:	2307      	movs	r3, #7
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000872:	2302      	movs	r3, #2
 8000874:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fd68 	bl	8001354 <HAL_RCC_OscConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x60>
  {
    Error_Handler();
 800088a:	f000 f8d9 	bl	8000a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088e:	230f      	movs	r3, #15
 8000890:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2303      	movs	r3, #3
 8000894:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	2104      	movs	r1, #4
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f974 	bl	8001b94 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008b2:	f000 f8c5 	bl	8000a40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ba:	f000 fcf5 	bl	80012a8 <HAL_PWREx_ControlVoltageScaling>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008c4:	f000 f8bc 	bl	8000a40 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3758      	adds	r7, #88	; 0x58
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_SPI2_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_SPI2_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_SPI2_Init+0x74>)
 80008dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_SPI2_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_SPI2_Init+0x74>)
 80008ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI2_Init+0x74>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_SPI2_Init+0x74>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_SPI2_Init+0x74>)
 80008fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000902:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI2_Init+0x74>)
 8000906:	2238      	movs	r2, #56	; 0x38
 8000908:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_SPI2_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_SPI2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI2_Init+0x74>)
 800091e:	2207      	movs	r2, #7
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_SPI2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI2_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_SPI2_Init+0x74>)
 8000930:	f001 fafc 	bl	8001f2c <HAL_SPI_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f881 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000030 	.word	0x20000030
 8000948:	40003800 	.word	0x40003800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <MX_GPIO_Init+0xe8>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a33      	ldr	r2, [pc, #204]	; (8000a34 <MX_GPIO_Init+0xe8>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <MX_GPIO_Init+0xe8>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <MX_GPIO_Init+0xe8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a2d      	ldr	r2, [pc, #180]	; (8000a34 <MX_GPIO_Init+0xe8>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_GPIO_Init+0xe8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xe8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <MX_GPIO_Init+0xe8>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_GPIO_Init+0xe8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_GPIO_Init+0xe8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <MX_GPIO_Init+0xe8>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_GPIO_Init+0xe8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD4_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 6152 	mov.w	r1, #3360	; 0xd20
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 fc46 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_GPIO_Init+0xec>)
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4815      	ldr	r0, [pc, #84]	; (8000a3c <MX_GPIO_Init+0xf0>)
 80009e6:	f000 fabf 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ea:	230c      	movs	r3, #12
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fa:	2307      	movs	r3, #7
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f000 faae 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin PA8 PA10 PA11 */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8000a0c:	f44f 6352 	mov.w	r3, #3360	; 0xd20
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 fa9e 	bl	8000f68 <HAL_GPIO_Init>

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	10210000 	.word	0x10210000
 8000a3c:	48000800 	.word	0x48000800

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6613      	str	r3, [r2, #96]	; 0x60
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <HAL_SPI_MspInit+0xb4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d144      	bne.n	8000b44 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_SPI_MspInit+0xb8>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b12:	2305      	movs	r3, #5
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <HAL_SPI_MspInit+0xbc>)
 8000b1e:	f000 fa23 	bl	8000f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b34:	2305      	movs	r3, #5
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <HAL_SPI_MspInit+0xc0>)
 8000b40:	f000 fa12 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40003800 	.word	0x40003800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000800 	.word	0x48000800
 8000b58:	48000400 	.word	0x48000400

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f8b4 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <SystemInit+0x64>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <SystemInit+0x64>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <SystemInit+0x68>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <SystemInit+0x68>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <SystemInit+0x68>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <SystemInit+0x68>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <SystemInit+0x68>)
 8000be4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000be8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <SystemInit+0x68>)
 8000bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <SystemInit+0x68>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <SystemInit+0x68>)
 8000bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <SystemInit+0x68>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SystemInit+0x64>)
 8000c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00
 8000c20:	40021000 	.word	0x40021000

08000c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c2a:	e003      	b.n	8000c34 <LoopCopyDataInit>

08000c2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c32:	3104      	adds	r1, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c3c:	d3f6      	bcc.n	8000c2c <CopyDataInit>
	ldr	r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c40:	e002      	b.n	8000c48 <LoopFillZerobss>

08000c42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c44:	f842 3b04 	str.w	r3, [r2], #4

08000c48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <LoopForever+0x16>)
	cmp	r2, r3
 8000c4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c4c:	d3f9      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c4e:	f7ff ffb3 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f001 fc87 	bl	8002564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c56:	f7ff fd67 	bl	8000728 <main>

08000c5a <LoopForever>:

LoopForever:
    b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c5c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000c60:	0800261c 	.word	0x0800261c
	ldr	r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c68:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000c6c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000c70:	20000098 	.word	0x20000098

08000c74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_IRQHandler>

08000c76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f93d 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f80e 	bl	8000ca8 <HAL_InitTick>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	e001      	b.n	8000c9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c98:	f7ff feda 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_InitTick+0x68>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d022      	beq.n	8000d02 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_InitTick+0x6c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_InitTick+0x68>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f93c 	bl	8000f4e <HAL_SYSTICK_Config>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10f      	bne.n	8000cfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d809      	bhi.n	8000cf6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cea:	f000 f914 	bl	8000f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_InitTick+0x70>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e007      	b.n	8000d06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e004      	b.n	8000d06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e001      	b.n	8000d06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	20000004 	.word	0x20000004
 8000d18:	20000008 	.word	0x20000008

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_IncTick+0x1c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x20>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_IncTick+0x1c>)
 8000d2c:	6013      	str	r3, [r2, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	20000094 	.word	0x20000094
 8000d3c:	2000000c 	.word	0x2000000c

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000094 	.word	0x20000094

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d70:	d004      	beq.n	8000d7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_Delay+0x40>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7c:	bf00      	nop
 8000d7e:	f7ff ffdf 	bl	8000d40 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d8f7      	bhi.n	8000d7e <HAL_Delay+0x26>
  {
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000000c 	.word	0x2000000c

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff47 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff5c 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffb0 	bl	8000ebc <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e154      	b.n	8001222 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8146 	beq.w	800121c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d00b      	beq.n	8000fb0 <HAL_GPIO_Init+0x48>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa4:	2b11      	cmp	r3, #17
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b12      	cmp	r3, #18
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 0201 	and.w	r2, r3, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0xea>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b12      	cmp	r3, #18
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	6939      	ldr	r1, [r7, #16]
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0203 	and.w	r2, r3, #3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80a0 	beq.w	800121c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b58      	ldr	r3, [pc, #352]	; (8001240 <HAL_GPIO_Init+0x2d8>)
 80010de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e0:	4a57      	ldr	r2, [pc, #348]	; (8001240 <HAL_GPIO_Init+0x2d8>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6613      	str	r3, [r2, #96]	; 0x60
 80010e8:	4b55      	ldr	r3, [pc, #340]	; (8001240 <HAL_GPIO_Init+0x2d8>)
 80010ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f4:	4a53      	ldr	r2, [pc, #332]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800111e:	d019      	beq.n	8001154 <HAL_GPIO_Init+0x1ec>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a49      	ldr	r2, [pc, #292]	; (8001248 <HAL_GPIO_Init+0x2e0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d013      	beq.n	8001150 <HAL_GPIO_Init+0x1e8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2e4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00d      	beq.n	800114c <HAL_GPIO_Init+0x1e4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_GPIO_Init+0x2e8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x1e0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a46      	ldr	r2, [pc, #280]	; (8001254 <HAL_GPIO_Init+0x2ec>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_GPIO_Init+0x1dc>
 8001140:	2304      	movs	r3, #4
 8001142:	e008      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001144:	2307      	movs	r3, #7
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001148:	2303      	movs	r3, #3
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001154:	2300      	movs	r3, #0
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001166:	4937      	ldr	r1, [pc, #220]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ec:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	f47f aea3 	bne.w	8000f78 <HAL_GPIO_Init+0x10>
  }
}
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000800 	.word	0x48000800
 8001250:	48000c00 	.word	0x48000c00
 8001254:	48001000 	.word	0x48001000
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001278:	e002      	b.n	8001280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40007000 	.word	0x40007000

080012a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b6:	d130      	bne.n	800131a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c4:	d038      	beq.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ce:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2232      	movs	r2, #50	; 0x32
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0c9b      	lsrs	r3, r3, #18
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ec:	e002      	b.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001300:	d102      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f2      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001314:	d110      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e00f      	b.n	800133a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001326:	d007      	beq.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001336:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40007000 	.word	0x40007000
 800134c:	20000004 	.word	0x20000004
 8001350:	431bde83 	.word	0x431bde83

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	f000 bc11 	b.w	8001b8a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001368:	4ba0      	ldr	r3, [pc, #640]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001372:	4b9e      	ldr	r3, [pc, #632]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80e4 	beq.w	8001552 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <HAL_RCC_OscConfig+0x4c>
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	f040 808b 	bne.w	80014ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b01      	cmp	r3, #1
 800139c:	f040 8087 	bne.w	80014ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_OscConfig+0x64>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e3e8      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1a      	ldr	r2, [r3, #32]
 80013bc:	4b8b      	ldr	r3, [pc, #556]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <HAL_RCC_OscConfig+0x7e>
 80013c8:	4b88      	ldr	r3, [pc, #544]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013d0:	e005      	b.n	80013de <HAL_RCC_OscConfig+0x8a>
 80013d2:	4b86      	ldr	r3, [pc, #536]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013de:	4293      	cmp	r3, r2
 80013e0:	d223      	bcs.n	800142a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fd40 	bl	8001e6c <RCC_SetFlashLatencyFromMSIRange>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e3c9      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f6:	4b7d      	ldr	r3, [pc, #500]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7c      	ldr	r2, [pc, #496]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b7a      	ldr	r3, [pc, #488]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4977      	ldr	r1, [pc, #476]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001414:	4b75      	ldr	r3, [pc, #468]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	4972      	ldr	r1, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	e025      	b.n	8001476 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142a:	4b70      	ldr	r3, [pc, #448]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6f      	ldr	r2, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	496a      	ldr	r1, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	4965      	ldr	r1, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fd00 	bl	8001e6c <RCC_SetFlashLatencyFromMSIRange>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e389      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001476:	f000 fc6f 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 800147a:	4601      	mov	r1, r0
 800147c:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <HAL_RCC_OscConfig+0x29c>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	fa21 f303 	lsr.w	r3, r1, r3
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_RCC_OscConfig+0x2a0>)
 8001494:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001496:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <HAL_RCC_OscConfig+0x2a4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fc04 	bl	8000ca8 <HAL_InitTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d052      	beq.n	8001550 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	e36d      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d032      	beq.n	800151c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014b6:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a4c      	ldr	r2, [pc, #304]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc3d 	bl	8000d40 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc39 	bl	8000d40 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e356      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014dc:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a3f      	ldr	r2, [pc, #252]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	493a      	ldr	r1, [pc, #232]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	4935      	ldr	r1, [pc, #212]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
 800151a:	e01a      	b.n	8001552 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a32      	ldr	r2, [pc, #200]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001528:	f7ff fc0a 	bl	8000d40 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001530:	f7ff fc06 	bl	8000d40 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e323      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x1dc>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d073      	beq.n	8001646 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b08      	cmp	r3, #8
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x21c>
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d10e      	bne.n	8001588 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d10b      	bne.n	8001588 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d063      	beq.n	8001644 <HAL_RCC_OscConfig+0x2f0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d15f      	bne.n	8001644 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e300      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d106      	bne.n	80015a0 <HAL_RCC_OscConfig+0x24c>
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0x288>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x270>
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0x288>
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a05      	ldr	r2, [pc, #20]	; (80015ec <HAL_RCC_OscConfig+0x298>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d01b      	beq.n	800161c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fbac 	bl	8000d40 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	e010      	b.n	800160e <HAL_RCC_OscConfig+0x2ba>
 80015ec:	40021000 	.word	0x40021000
 80015f0:	080025d4 	.word	0x080025d4
 80015f4:	20000004 	.word	0x20000004
 80015f8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fba0 	bl	8000d40 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e2bd      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160e:	4baf      	ldr	r3, [pc, #700]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x2a8>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fb90 	bl	8000d40 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fb8c 	bl	8000d40 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e2a9      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001636:	4ba5      	ldr	r3, [pc, #660]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x2d0>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d060      	beq.n	8001714 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d005      	beq.n	8001664 <HAL_RCC_OscConfig+0x310>
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b0c      	cmp	r3, #12
 800165c:	d119      	bne.n	8001692 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d116      	bne.n	8001692 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001664:	4b99      	ldr	r3, [pc, #612]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_OscConfig+0x328>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e286      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b93      	ldr	r3, [pc, #588]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	4990      	ldr	r1, [pc, #576]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001690:	e040      	b.n	8001714 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d023      	beq.n	80016e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169a:	4b8c      	ldr	r3, [pc, #560]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a8b      	ldr	r2, [pc, #556]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7ff fb4b 	bl	8000d40 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff fb47 	bl	8000d40 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e264      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c0:	4b82      	ldr	r3, [pc, #520]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	497c      	ldr	r1, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
 80016e0:	e018      	b.n	8001714 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a79      	ldr	r2, [pc, #484]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80016e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb27 	bl	8000d40 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fb23 	bl	8000d40 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e240      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001708:	4b70      	ldr	r3, [pc, #448]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d03c      	beq.n	800179a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01c      	beq.n	8001762 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001728:	4b68      	ldr	r3, [pc, #416]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172e:	4a67      	ldr	r2, [pc, #412]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fb02 	bl	8000d40 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff fafe 	bl	8000d40 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e21b      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ef      	beq.n	8001740 <HAL_RCC_OscConfig+0x3ec>
 8001760:	e01b      	b.n	800179a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff fae5 	bl	8000d40 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff fae1 	bl	8000d40 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e1fe      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ef      	bne.n	800177a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80a6 	beq.w	80018f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10d      	bne.n	80017d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	4b44      	ldr	r3, [pc, #272]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	4a43      	ldr	r2, [pc, #268]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6593      	str	r3, [r2, #88]	; 0x58
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d0:	2301      	movs	r3, #1
 80017d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <HAL_RCC_OscConfig+0x57c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d118      	bne.n	8001812 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e0:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_RCC_OscConfig+0x57c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a3a      	ldr	r2, [pc, #232]	; (80018d0 <HAL_RCC_OscConfig+0x57c>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ec:	f7ff faa8 	bl	8000d40 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f4:	f7ff faa4 	bl	8000d40 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1c1      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <HAL_RCC_OscConfig+0x57c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_RCC_OscConfig+0x4d8>
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800182a:	e024      	b.n	8001876 <HAL_RCC_OscConfig+0x522>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d110      	bne.n	8001856 <HAL_RCC_OscConfig+0x502>
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	4a24      	ldr	r2, [pc, #144]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	4a20      	ldr	r2, [pc, #128]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001854:	e00f      	b.n	8001876 <HAL_RCC_OscConfig+0x522>
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800186e:	f023 0304 	bic.w	r3, r3, #4
 8001872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fa5f 	bl	8000d40 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fa5b 	bl	8000d40 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e176      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_OscConfig+0x578>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0ed      	beq.n	8001886 <HAL_RCC_OscConfig+0x532>
 80018aa:	e01a      	b.n	80018e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fa48 	bl	8000d40 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b2:	e00f      	b.n	80018d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff fa44 	bl	8000d40 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d906      	bls.n	80018d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e15f      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d4:	4baa      	ldr	r3, [pc, #680]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e8      	bne.n	80018b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e2:	7ffb      	ldrb	r3, [r7, #31]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e8:	4ba5      	ldr	r3, [pc, #660]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	4aa4      	ldr	r2, [pc, #656]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 80018ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d03c      	beq.n	800197a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01c      	beq.n	8001942 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001908:	4b9d      	ldr	r3, [pc, #628]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190e:	4a9c      	ldr	r2, [pc, #624]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff fa12 	bl	8000d40 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001920:	f7ff fa0e 	bl	8000d40 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e12b      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001932:	4b93      	ldr	r3, [pc, #588]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0ef      	beq.n	8001920 <HAL_RCC_OscConfig+0x5cc>
 8001940:	e01b      	b.n	800197a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001942:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001948:	4a8d      	ldr	r2, [pc, #564]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff f9f5 	bl	8000d40 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800195a:	f7ff f9f1 	bl	8000d40 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e10e      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 800196e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ef      	bne.n	800195a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8102 	beq.w	8001b88 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	2b02      	cmp	r3, #2
 800198a:	f040 80c5 	bne.w	8001b18 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800198e:	4b7c      	ldr	r3, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0203 	and.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	429a      	cmp	r2, r3
 80019a0:	d12c      	bne.n	80019fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	3b01      	subs	r3, #1
 80019ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d123      	bne.n	80019fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d11b      	bne.n	80019fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d113      	bne.n	80019fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	3b01      	subs	r3, #1
 80019e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d109      	bne.n	80019fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	3b01      	subs	r3, #1
 80019f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d067      	beq.n	8001acc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d062      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a02:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0bb      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a12:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5a      	ldr	r2, [pc, #360]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a1e:	f7ff f98f 	bl	8000d40 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f98b 	bl	8000d40 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0a8      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a44:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4b4e      	ldr	r3, [pc, #312]	; (8001b84 <HAL_RCC_OscConfig+0x830>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a54:	3a01      	subs	r2, #1
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a66:	0852      	lsrs	r2, r2, #1
 8001a68:	3a01      	subs	r2, #1
 8001a6a:	0552      	lsls	r2, r2, #21
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a72:	0852      	lsrs	r2, r2, #1
 8001a74:	3a01      	subs	r2, #1
 8001a76:	0652      	lsls	r2, r2, #25
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a7e:	06d2      	lsls	r2, r2, #27
 8001a80:	430a      	orrs	r2, r1
 8001a82:	493f      	ldr	r1, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a3c      	ldr	r2, [pc, #240]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a39      	ldr	r2, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa0:	f7ff f94e 	bl	8000d40 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f94a 	bl	8000d40 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e067      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac6:	e05f      	b.n	8001b88 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e05e      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d157      	bne.n	8001b88 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a28      	ldr	r2, [pc, #160]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001af0:	f7ff f926 	bl	8000d40 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff f922 	bl	8000d40 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e03f      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x7a4>
 8001b16:	e037      	b.n	8001b88 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d02d      	beq.n	8001b7a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b28:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b3c:	f023 0303 	bic.w	r3, r3, #3
 8001b40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff f8f5 	bl	8000d40 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff f8f1 	bl	8000d40 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e00e      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_RCC_OscConfig+0x82c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x806>
 8001b78:	e006      	b.n	8001b88 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e005      	b.n	8001b8a <HAL_RCC_OscConfig+0x836>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0c8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b66      	ldr	r3, [pc, #408]	; (8001d44 <HAL_RCC_ClockConfig+0x1b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_RCC_ClockConfig+0x1b0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4961      	ldr	r1, [pc, #388]	; (8001d44 <HAL_RCC_ClockConfig+0x1b0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_RCC_ClockConfig+0x1b0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b0      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d04c      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	4b56      	ldr	r3, [pc, #344]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d121      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e09e      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c04:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d115      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e092      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1c:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e086      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e07e      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 0203 	bic.w	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	493f      	ldr	r1, [pc, #252]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4e:	f7ff f877 	bl	8000d40 <HAL_GetTick>
 8001c52:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c56:	f7ff f873 	bl	8000d40 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e066      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 020c 	and.w	r2, r3, #12
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d1eb      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8a:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	492c      	ldr	r1, [pc, #176]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <HAL_RCC_ClockConfig+0x1b0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d210      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_RCC_ClockConfig+0x1b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	4924      	ldr	r1, [pc, #144]	; (8001d44 <HAL_RCC_ClockConfig+0x1b0>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <HAL_RCC_ClockConfig+0x1b0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e036      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4918      	ldr	r1, [pc, #96]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4910      	ldr	r1, [pc, #64]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d0a:	f000 f825 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d0e:	4601      	mov	r1, r0
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCC_ClockConfig+0x1b4>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	fa21 f303 	lsr.w	r3, r1, r3
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe ffba 	bl	8000ca8 <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d38:	7afb      	ldrb	r3, [r7, #11]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	080025d4 	.word	0x080025d4
 8001d50:	20000004 	.word	0x20000004
 8001d54:	20000008 	.word	0x20000008

08001d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x34>
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d121      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d11e      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d98:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	e005      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001db4:	4a2a      	ldr	r2, [pc, #168]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10d      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d102      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	e004      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d133      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa4>
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0xaa>
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dfe:	617b      	str	r3, [r7, #20]
      break;
 8001e00:	e005      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	617b      	str	r3, [r7, #20]
      break;
 8001e0c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	3301      	adds	r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	fb02 f203 	mul.w	r2, r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0e5b      	lsrs	r3, r3, #25
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3724      	adds	r7, #36	; 0x24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	080025e4 	.word	0x080025e4
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	007a1200 	.word	0x007a1200

08001e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e84:	f7ff fa02 	bl	800128c <HAL_PWREx_GetVoltageRange>
 8001e88:	6178      	str	r0, [r7, #20]
 8001e8a:	e014      	b.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
 8001e98:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ea4:	f7ff f9f2 	bl	800128c <HAL_PWREx_GetVoltageRange>
 8001ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ebc:	d10b      	bne.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d919      	bls.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ec8:	d902      	bls.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eca:	2302      	movs	r3, #2
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e013      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e010      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b80      	cmp	r3, #128	; 0x80
 8001eda:	d902      	bls.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001edc:	2303      	movs	r3, #3
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e00a      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d102      	bne.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee8:	2302      	movs	r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	e004      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b70      	cmp	r3, #112	; 0x70
 8001ef2:	d101      	bne.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 0207 	bic.w	r2, r3, #7
 8001f00:	4909      	ldr	r1, [pc, #36]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40022000 	.word	0x40022000

08001f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07c      	b.n	8002038 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7fe fd9d 	bl	8000a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f7e:	d902      	bls.n	8001f86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	e002      	b.n	8001f8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001f94:	d007      	beq.n	8001fa6 <HAL_SPI_Init+0x7a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f9e:	d002      	beq.n	8001fa6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fb6:	d903      	bls.n	8001fc0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbe:	e002      	b.n	8001fc6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	ea42 0103 	orr.w	r1, r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	f003 0204 	and.w	r2, r3, #4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	ea42 0103 	orr.w	r1, r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_SPI_Transmit+0x22>
 800205e:	2302      	movs	r3, #2
 8002060:	e150      	b.n	8002304 <HAL_SPI_Transmit+0x2c4>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800206a:	f7fe fe69 	bl	8000d40 <HAL_GetTick>
 800206e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d002      	beq.n	8002086 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002080:	2302      	movs	r3, #2
 8002082:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002084:	e135      	b.n	80022f2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <HAL_SPI_Transmit+0x52>
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002096:	e12c      	b.n	80022f2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	88fa      	ldrh	r2, [r7, #6]
 80020b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e2:	d107      	bne.n	80020f4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b40      	cmp	r3, #64	; 0x40
 8002100:	d007      	beq.n	8002112 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800211a:	d94b      	bls.n	80021b4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_SPI_Transmit+0xea>
 8002124:	8afb      	ldrh	r3, [r7, #22]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d13e      	bne.n	80021a8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	1c9a      	adds	r2, r3, #2
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800214e:	e02b      	b.n	80021a8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d112      	bne.n	8002184 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	1c9a      	adds	r2, r3, #2
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002182:	e011      	b.n	80021a8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002184:	f7fe fddc 	bl	8000d40 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d803      	bhi.n	800219c <HAL_SPI_Transmit+0x15c>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800219a:	d102      	bne.n	80021a2 <HAL_SPI_Transmit+0x162>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021a6:	e0a4      	b.n	80022f2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ce      	bne.n	8002150 <HAL_SPI_Transmit+0x110>
 80021b2:	e07c      	b.n	80022ae <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_SPI_Transmit+0x182>
 80021bc:	8afb      	ldrh	r3, [r7, #22]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d170      	bne.n	80022a4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d912      	bls.n	80021f2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	1c9a      	adds	r2, r3, #2
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b02      	subs	r3, #2
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021f0:	e058      	b.n	80022a4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	330c      	adds	r3, #12
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002218:	e044      	b.n	80022a4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b02      	cmp	r3, #2
 8002226:	d12b      	bne.n	8002280 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d912      	bls.n	8002258 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	1c9a      	adds	r2, r3, #2
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b02      	subs	r3, #2
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002256:	e025      	b.n	80022a4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800227e:	e011      	b.n	80022a4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002280:	f7fe fd5e 	bl	8000d40 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d803      	bhi.n	8002298 <HAL_SPI_Transmit+0x258>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002296:	d102      	bne.n	800229e <HAL_SPI_Transmit+0x25e>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022a2:	e026      	b.n	80022f2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1b5      	bne.n	800221a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f90f 	bl	80024d6 <SPI_EndRxTxTransaction>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	77fb      	strb	r3, [r7, #31]
 80022ee:	e000      	b.n	80022f2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80022f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002302:	7ffb      	ldrb	r3, [r7, #31]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800231a:	b2db      	uxtb	r3, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002338:	e04c      	b.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002340:	d048      	beq.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002342:	f7fe fcfd 	bl	8000d40 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d902      	bls.n	8002358 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d13d      	bne.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002366:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002370:	d111      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237a:	d004      	beq.n	8002386 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	d107      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002394:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239e:	d10f      	bne.n	80023c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e00f      	b.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4013      	ands	r3, r2
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d1a3      	bne.n	800233a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800240a:	e057      	b.n	80024bc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002412:	d106      	bne.n	8002422 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d048      	beq.n	80024bc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800242a:	f7fe fc89 	bl	8000d40 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d902      	bls.n	8002440 <SPI_WaitFifoStateUntilTimeout+0x44>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d13d      	bne.n	80024bc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800244e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002458:	d111      	bne.n	800247e <SPI_WaitFifoStateUntilTimeout+0x82>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002462:	d004      	beq.n	800246e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246c:	d107      	bne.n	800247e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800247c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002486:	d10f      	bne.n	80024a8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e008      	b.n	80024ce <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d19f      	bne.n	800240c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af02      	add	r7, sp, #8
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff ff84 	bl	80023fc <SPI_WaitFifoStateUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e027      	b.n	800255a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f7ff ff07 	bl	8002328 <SPI_WaitFlagStateUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	f043 0220 	orr.w	r2, r3, #32
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e014      	b.n	800255a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2200      	movs	r2, #0
 8002538:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff ff5d 	bl	80023fc <SPI_WaitFifoStateUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e000      	b.n	800255a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <__libc_init_array>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	4e0d      	ldr	r6, [pc, #52]	; (800259c <__libc_init_array+0x38>)
 8002568:	4c0d      	ldr	r4, [pc, #52]	; (80025a0 <__libc_init_array+0x3c>)
 800256a:	1ba4      	subs	r4, r4, r6
 800256c:	10a4      	asrs	r4, r4, #2
 800256e:	2500      	movs	r5, #0
 8002570:	42a5      	cmp	r5, r4
 8002572:	d109      	bne.n	8002588 <__libc_init_array+0x24>
 8002574:	4e0b      	ldr	r6, [pc, #44]	; (80025a4 <__libc_init_array+0x40>)
 8002576:	4c0c      	ldr	r4, [pc, #48]	; (80025a8 <__libc_init_array+0x44>)
 8002578:	f000 f820 	bl	80025bc <_init>
 800257c:	1ba4      	subs	r4, r4, r6
 800257e:	10a4      	asrs	r4, r4, #2
 8002580:	2500      	movs	r5, #0
 8002582:	42a5      	cmp	r5, r4
 8002584:	d105      	bne.n	8002592 <__libc_init_array+0x2e>
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800258c:	4798      	blx	r3
 800258e:	3501      	adds	r5, #1
 8002590:	e7ee      	b.n	8002570 <__libc_init_array+0xc>
 8002592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002596:	4798      	blx	r3
 8002598:	3501      	adds	r5, #1
 800259a:	e7f2      	b.n	8002582 <__libc_init_array+0x1e>
 800259c:	08002614 	.word	0x08002614
 80025a0:	08002614 	.word	0x08002614
 80025a4:	08002614 	.word	0x08002614
 80025a8:	08002618 	.word	0x08002618

080025ac <memset>:
 80025ac:	4402      	add	r2, r0
 80025ae:	4603      	mov	r3, r0
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d100      	bne.n	80025b6 <memset+0xa>
 80025b4:	4770      	bx	lr
 80025b6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ba:	e7f9      	b.n	80025b0 <memset+0x4>

080025bc <_init>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	bf00      	nop
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr

080025c8 <_fini>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr
